/*
 * Copyright (C) 2017 emnga
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package Core.GUI;

import Core.Assembler.Assembler;
import Core.Assembler.Instruction.Directive;
import Core.Assembler.Instruction.Instruction;
import Core.Assembler.Instruction.InstructionType;
import Core.Assembler.Instruction.Line;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author emnga
 */
public class AssemblerEditor extends javax.swing.JFrame {

    /**
     * Creates new form AssemblerEditor
     */
    public main parent;
    JTable tableLines;
    JTable tableInstructions;
    JTable tableDirectives;
    JTable tableVarUsages;
    JTable tableTypes;
    public ArrayList<Instruction> auxInstructions;
    public ArrayList<Line> auxLines;
    public ArrayList<Directive> auxDirectives;
    public ArrayList<Line> auxVarUsages;
    public ArrayList<InstructionType> auxTypes;

    public AssemblerEditor(main parent) {
        this.parent = parent;
        initComponents();
        initData();
    }
    
    private void ShowPopUp(InstructionType type, MouseEvent e){
        JPopupMenu jp=new JPopupMenu();
        JMenuItem jm1= new JMenuItem("Copy");
        jm1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                InstructionType copy=new InstructionType(type);
                copy.setIdentifier(copy.getIdentifier()+"copy");
                AssemblerEditor.this.auxTypes.add(copy);
                AssemblerEditor.this.updateTypes();
            }
        });
        jp.add(jm1);
        jp.show(e.getComponent(), e.getX(), e.getY());
    }
    private void ShowPopUp(Line line, int typeId, MouseEvent e){
        JPopupMenu jp=new JPopupMenu();
        JMenuItem jm1= new JMenuItem("Copy");
        jm1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                switch(typeId){
                    case Line.ID_INSTRUCTION:
                        Instruction copyInst=new Instruction((Instruction)line);
                        copyInst.identifier=line.identifier+"copy";
                        AssemblerEditor.this.auxInstructions.add(copyInst);
                        AssemblerEditor.this.updateInstructions();
                        break;
                    case Line.ID_LINE:
                        Line copLn=new Line(line);
                        copLn.identifier=line.identifier+"copy";
                        AssemblerEditor.this.auxLines.add(copLn);
                        AssemblerEditor.this.updateLines();
                        break;
                    case Line.ID_VARIABLEUSAGE:
                        Line copVu=new Line(line);
                        copVu.identifier=line.identifier+"copy";
                        AssemblerEditor.this.auxVarUsages.add(copVu);
                        AssemblerEditor.this.updateVarUsages();
                        break;
                    default:
                        throw new Exceptions.FatalException("Error in code parsing for popup menu, please contact support");
                }
            }
        });
        jp.add(jm1);
        jp.show(e.getComponent(), e.getX(), e.getY());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtIOC = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtICC = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtILCC = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtIDC = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtLCO = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtLCC = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        tabLines = new javax.swing.JTabbedPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        menuSV = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Assembler Editor");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Assembler sintax values"));
        jScrollPane1.setMaximumSize(new java.awt.Dimension(170, 191));

        jPanel2.setLayout(new java.awt.GridLayout(12, 1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Identifier Opener character");
        jPanel2.add(jLabel1);

        txtIOC.setText("jLabel1");
        jPanel2.add(txtIOC);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Identifier Closer character");
        jPanel2.add(jLabel3);

        txtICC.setText("jLabel1");
        jPanel2.add(txtICC);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("In-Line Comment character");
        jPanel2.add(jLabel5);

        txtILCC.setText("jLabel1");
        jPanel2.add(txtILCC);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Identifier Divider character");
        jPanel2.add(jLabel7);

        txtIDC.setText("jLabel1");
        jPanel2.add(txtIDC);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Multi-Line Comment Opener");
        jPanel2.add(jLabel9);

        txtLCO.setText("jLabel1");
        jPanel2.add(txtLCO);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Multi-Line Comment Closer");
        jPanel2.add(jLabel11);

        txtLCC.setText("jLabel1");
        jPanel2.add(txtLCC);

        jScrollPane1.setViewportView(jPanel2);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("All"));
        jPanel1.setPreferredSize(new java.awt.Dimension(562, 191));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabLines, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabLines, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
        );

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem6.setText("Save");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setText("Exit");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        menuSV.setText("Edit");

        jMenu3.setText("Add");

        jMenuItem1.setText("Line");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Instruction");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem4.setText("Variable usage");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Inst. type");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        menuSV.add(jMenu3);

        jMenuItem3.setText("Sintax values");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        menuSV.add(jMenuItem3);

        jMenuBar1.add(menuSV);

        jMenu2.setText("?");

        jMenuItem8.setText("Help");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(btnNew)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.openLineCreator();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.openInstructionCreator();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int sel = DialogCreator.createYesNoCancelDialog(this, "DO you want to save changes before exiting?", "Warning", null);
        switch (sel) {
            case 0:
                saveAssemblerData();
                close();
            case 1:
                close();
                break;
            default:
                break;
        }

    }//GEN-LAST:event_formWindowClosing

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        close();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        openSintaxValuesEditor();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        switch(this.tabLines.getSelectedIndex()){
            case 0:
                openInstructionCreator();
                break;
            case 1:
                openLineCreator();
                break;
            case 2:
                DialogCreator.createMessageDialog(this, "Can't add directives");
                break;
            case 3:
                openVarUsageCreator();
                break;
            case 4:
                openTypeCreator();
                break;
            default:
                DialogCreator.createErrorDialog(this, "Ooops", "You are not supposed to see this\nerror, what are you doing?");
                break;
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Assembler ass=this.parent.cpu.getAssembler();
        ass.set_Varusages(auxVarUsages);
        ass.set_Directives(auxDirectives);
        ass.set_Lines(auxLines);
        ass.set_Instructions(auxInstructions);
        ass.setInstructionTypes(auxTypes);
        ass.repoblateInstructionsFrom_Lists();
        parent.updateAssemblerData();
        close();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        this.openVarUsageCreator();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        this.openTypeCreator();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        close();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        Assembler ass=this.parent.cpu.getAssembler();
        ass.set_Varusages(auxVarUsages);
        ass.set_Directives(auxDirectives);
        ass.set_Lines(auxLines);
        ass.set_Instructions(auxInstructions);
        ass.setInstructionTypes(auxTypes);
        ass.repoblateInstructionsFrom_Lists();
        parent.updateAssemblerData();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        new HelpDialog(HelpDialog.ID_ASSEMBLER).setVisible(true);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNew;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuSV;
    private javax.swing.JTabbedPane tabLines;
    private javax.swing.JLabel txtICC;
    private javax.swing.JLabel txtIDC;
    private javax.swing.JLabel txtILCC;
    private javax.swing.JLabel txtIOC;
    private javax.swing.JLabel txtLCC;
    private javax.swing.JLabel txtLCO;
    // End of variables declaration//GEN-END:variables

    private void initData() {
        this.auxDirectives = new ArrayList<>(Directive.DEFAULT_DIRECTIVES);
        this.auxInstructions = new ArrayList<>(this.parent.cpu.getAssembler().get_Instructions());
        this.auxLines = new ArrayList<>(this.parent.cpu.getAssembler().get_Lines());
        this.auxVarUsages = new ArrayList<>(this.parent.cpu.getAssembler().get_Varusages());
        this.auxTypes = new ArrayList<>(this.parent.cpu.getAssembler().getInstructionTypes());
        this.txtICC.setText(Line.identifierCloserCharacter + "");
        this.txtIDC.setText(Line.identifierDividerCharacter + "");
        this.txtILCC.setText(Line.inLineCommentCharacter + "");
        this.txtIOC.setText(Line.identifierOpenerCharacter + "");
        this.txtLCC.setText(Line.longCommentCloser);
        this.txtLCO.setText(Line.longCommentOpener);
        initTables();
    }

    private void initTables() {
        initInnstructionsTable();
        initLinesTable();
        initDirectivesTable();
        initVarUsagesTable();
        initInstructionTypesTable();
    }

    private void initInnstructionsTable() {
        tableInstructions = new JTable();
        tableInstructions.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    Instruction inst = null;
                    for (Instruction in : AssemblerEditor.this.auxInstructions) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openInstructionEditor(inst);
                }
            }

            @Override
            public void mouseReleased(MouseEvent me) {
                super.mouseReleased(me);
                if(me.getButton()==3){
                    JTable table = (JTable) me.getSource();
                    Point point = me.getPoint();
                    int row = table.rowAtPoint(point);
                    String identifier = (String) table.getValueAt(row, 0);
                    Instruction inst = null;
                    for (Instruction in : AssemblerEditor.this.auxInstructions) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    ShowPopUp(inst, Line.ID_INSTRUCTION,me);
                }
            }
            
        });
        JScrollPane sp = new JScrollPane(tableInstructions);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Type", "Format", "Format sectors", "Sintax"}, 0);
        this.auxInstructions.stream().map((inst) -> {
            Object[] row = new Object[5];
            row[0] = inst.getIdentifier();
            row[1] = inst.getType().getIdentifier();
            row[2] = Arrays.toString(inst.format.data);
            row[3] = Arrays.toString(inst.getType().getFormat().getSectionsNames()).replaceAll("\\[", "").replaceAll("\\]", "");
            row[4] = inst.getSintax().getOriginal();
            return row;
        }).forEachOrdered((row) -> {
            model.addRow(row);
        });
        tableInstructions.setModel(model);
        tableInstructions.setVisible(true);
        tableInstructions.setEnabled(false);
        this.tabLines.addTab("Instructions", sp);
    }

    private void initLinesTable() {
        tableLines = new JTable();
        tableLines.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    Line inst = null;
                    for (Line in : AssemblerEditor.this.auxLines) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openLineEditor(inst);
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent me) {
                super.mouseReleased(me);
                if(me.getButton()==3){
                    JTable table = (JTable) me.getSource();
                    Point point = me.getPoint();
                    int row = table.rowAtPoint(point);
                    String identifier = (String) table.getValueAt(row, 0);
                    Line inst = null;
                    for (Line in : AssemblerEditor.this.auxLines) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    ShowPopUp(inst, Line.ID_LINE,me);
                }
            }
        });
        JScrollPane sp = new JScrollPane(tableLines);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Default", "Sintax"}, 0);
        for (Line inst : this.auxLines) {
            Object[] row = new Object[3];
            row[0] = inst.getIdentifier();
            row[1] = Line.isDefault(inst) ? "Yes" : "No";
            row[2] = inst.sintax.getOriginal();
            model.addRow(row);
        }
        tableLines.setModel(model);
        tableLines.setVisible(true);
        tableLines.setEnabled(false);
        this.tabLines.addTab("Lines", sp);
    }

    private void saveAssemblerData() {
        Assembler ass=this.parent.cpu.getAssembler();
        ass.set_Varusages(auxVarUsages);
        ass.set_Directives(auxDirectives);
        ass.set_Lines(auxLines);
        ass.set_Instructions(auxInstructions);
        ass.setInstructionTypes(auxTypes);
        ass.repoblateInstructionsFrom_Lists();
        parent.updateAssemblerData();
        close();
    }

    private void close() {
        parent.toFront();
        parent.setEnabled(true);
        this.dispose();
    }

    private void openInstructionEditor(Instruction inst) {
        new InstructionEditor(this, inst).setVisible(true);
        this.setEnabled(false);
    }

    private void openInstructionCreator(){
        new InstructionEditor(this).setVisible(true);
        this.setEnabled(false);
    }
    
    private void initDirectivesTable() {
        tableDirectives = new JTable();
        tableDirectives.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    Directive inst = null;
                    for (Directive in : AssemblerEditor.this.auxDirectives) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openDirectiveEditor(inst);
                }
            }
        });
        JScrollPane sp = new JScrollPane(tableDirectives);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Priority", "Sintax"}, 0);
        for (Directive inst : this.auxDirectives) {
            Object[] row = new Object[3];
            row[0] = inst.getIdentifier();
            row[1] = inst.getPriority();
            row[2] = inst.sintax.getOriginal();
            model.addRow(row);
        }
        tableDirectives.setModel(model);
        tableDirectives.setVisible(true);
        tableDirectives.setEnabled(false);
        this.tabLines.addTab("Directives", sp);
    }

    private void initVarUsagesTable() {
        tableVarUsages = new JTable();
        tableVarUsages.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    Line inst = null;
                    for (Line in : AssemblerEditor.this.auxVarUsages) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openVarUsageEditor(inst);
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent me) {
                super.mouseReleased(me);
                if(me.getButton()==3){
                    JTable table = (JTable) me.getSource();
                    Point point = me.getPoint();
                    int row = table.rowAtPoint(point);
                    String identifier = (String) table.getValueAt(row, 0);
                    Line inst = null;
                    for (Line in : AssemblerEditor.this.auxVarUsages) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    ShowPopUp(inst, Line.ID_VARIABLEUSAGE,me);
                }
            }
        });
        JScrollPane sp = new JScrollPane(tableVarUsages);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Sintax"}, 0);
        for (Line inst : this.auxVarUsages) {
            Object[] row = new Object[3];
            row[0] = inst.getIdentifier();
            row[1] = inst.sintax.getOriginal();
            model.addRow(row);
        }
        tableVarUsages.setModel(model);
        tableVarUsages.setVisible(true);
        tableVarUsages.setEnabled(false);
        this.tabLines.addTab("Variable usages", sp);
    }

    void updateInstructions() {
        this.tabLines.setComponentAt(0, null);
        tableInstructions = new JTable();
        tableInstructions.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    Instruction inst = null;
                    for (Instruction in : AssemblerEditor.this.auxInstructions) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openInstructionEditor(inst);
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent me) {
                super.mouseReleased(me);
                if(me.getButton()==3){
                    JTable table = (JTable) me.getSource();
                    Point point = me.getPoint();
                    int row = table.rowAtPoint(point);
                    String identifier = (String) table.getValueAt(row, 0);
                    Instruction inst = null;
                    for (Instruction in : AssemblerEditor.this.auxInstructions) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    ShowPopUp(inst, Line.ID_INSTRUCTION,me);
                }
            }
        });
        JScrollPane sp = new JScrollPane(tableInstructions);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Type", "Format", "Format sectors", "Sintax"}, 0);
        for (Instruction inst : this.auxInstructions) {
            Object[] row = new Object[5];
            row[0] = inst.getIdentifier();
            row[1] = inst.getType().getIdentifier();
            row[2] = Arrays.toString(inst.format.data);
            row[3] = Arrays.toString(inst.getType().getFormat().getSectionsNames()).replaceAll("\\[", "").replaceAll("\\]", "");
            row[4] = inst.getSintax().getOriginal();
            model.addRow(row);
        }
        tableInstructions.setModel(model);
        tableInstructions.setVisible(true);
        tableInstructions.setEnabled(false);
        this.tabLines.setComponentAt(0, sp);
    }

    private void openLineEditor(Line inst) {
        new LineEditor(this, inst, Line.isDefault(inst)).setVisible(true);
        this.setEnabled(false);
    }
    
    private void openLineCreator(){
        new LineEditor(this).setVisible(true);
        this.setEnabled(false);
    }

    void updateLines() {
        this.tabLines.setComponentAt(1, null);
        tableLines = new JTable();
        tableLines.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    Line inst = null;
                    for (Line in : AssemblerEditor.this.auxLines) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openLineEditor(inst);
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent me) {
                super.mouseReleased(me);
                if(me.getButton()==3){
                    JTable table = (JTable) me.getSource();
                    Point point = me.getPoint();
                    int row = table.rowAtPoint(point);
                    String identifier = (String) table.getValueAt(row, 0);
                    Line inst = null;
                    for (Line in : AssemblerEditor.this.auxLines) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    ShowPopUp(inst, Line.ID_LINE,me);
                }
            }
        });
        JScrollPane sp = new JScrollPane(tableLines);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Default", "Sintax"}, 0);
        for (Line inst : this.auxLines) {
            Object[] row = new Object[3];
            row[0] = inst.getIdentifier();
            row[1] = Line.isDefault(inst) ? "Yes" : "No";
            row[2] = inst.sintax.getOriginal();
            model.addRow(row);
        }
        tableLines.setModel(model);
        tableLines.setVisible(true);
        tableLines.setEnabled(false);
        this.tabLines.setComponentAt(1, sp);
    }

    void updateDirectives() {
        this.tabLines.setComponentAt(2, null);
        tableDirectives = new JTable();
        tableDirectives.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    Directive inst = null;
                    for (Directive in : AssemblerEditor.this.auxDirectives) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openDirectiveEditor(inst);
                }
            }
        });
        JScrollPane sp = new JScrollPane(tableDirectives);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Priority", "Sintax"}, 0);
        for (Directive inst : this.auxDirectives) {
            Object[] row = new Object[3];
            row[0] = inst.getIdentifier();
            row[1] = inst.getPriority();
            row[2] = inst.sintax.getOriginal();
            model.addRow(row);
        }
        tableDirectives.setModel(model);
        tableDirectives.setVisible(true);
        tableDirectives.setEnabled(false);
        this.tabLines.setComponentAt(2, sp);
    }

    private void openDirectiveEditor(Directive inst) {
        new DirectiveEditor(this, inst).setVisible(true);
        this.setEnabled(false);
    }

    private void initInstructionTypesTable() {
        tableTypes = new JTable();
        tableTypes.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    InstructionType inst = null;
                    for (InstructionType in : AssemblerEditor.this.auxTypes) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openTypeEditor(inst);
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent me) {
                super.mouseReleased(me);
                if(me.getButton()==3){
                    JTable table = (JTable) me.getSource();
                    Point point = me.getPoint();
                    int row = table.rowAtPoint(point);
                    String identifier = (String) table.getValueAt(row, 0);
                    InstructionType inst = null;
                    for (InstructionType in : AssemblerEditor.this.auxTypes) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    ShowPopUp(inst,me);
                }
            }
        });
        JScrollPane sp = new JScrollPane(tableTypes);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Sectors"}, 0);
        for (InstructionType inst : this.auxTypes) {
            Object[] row = new Object[2];
            row[0] = inst.getIdentifier();
            row[1] = Arrays.toString(inst.getFormat().getSectionsNames()).replaceAll("\\[", "").replaceAll("\\]", "");
            model.addRow(row);
        }
        tableTypes.setModel(model);
        tableTypes.setVisible(true);
        tableTypes.setEnabled(false);
        this.tabLines.addTab("Instruction types", sp);
    }

    void updateVarUsages() {
        this.tabLines.setComponentAt(3, null);
        tableVarUsages = new JTable();
        tableVarUsages.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    Line inst = null;
                    for (Line in : AssemblerEditor.this.auxVarUsages) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openVarUsageEditor(inst);
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent me) {
                super.mouseReleased(me);
                if(me.getButton()==3){
                    JTable table = (JTable) me.getSource();
                    Point point = me.getPoint();
                    int row = table.rowAtPoint(point);
                    String identifier = (String) table.getValueAt(row, 0);
                    Line inst = null;
                    for (Line in : AssemblerEditor.this.auxVarUsages) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    ShowPopUp(inst, Line.ID_VARIABLEUSAGE,me);
                }
            }
        });
        JScrollPane sp = new JScrollPane(tableVarUsages);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Sintax"}, 0);
        for (Line inst : this.auxVarUsages) {
            Object[] row = new Object[3];
            row[0] = inst.getIdentifier();
            row[1] = inst.sintax.getOriginal();
            model.addRow(row);
        }
        tableVarUsages.setModel(model);
        tableVarUsages.setVisible(true);
        tableVarUsages.setEnabled(false);
        this.tabLines.setComponentAt(3, sp);
    }

    private void openVarUsageEditor(Line inst) {
        new VarUsageEditor(this, inst).setVisible(true);
        this.setEnabled(false);
    }

    private void openTypeEditor(InstructionType inst) {
        new TypeEditor(this, inst).setVisible(true);
        this.setEnabled(false);
    }

    void updateTypes() {
        this.tabLines.setComponentAt(4, null);
        tableTypes = new JTable();
        tableTypes.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2) {
                    String identifier = (String) table.getValueAt(row, 0);
                    InstructionType inst = null;
                    for (InstructionType in : AssemblerEditor.this.auxTypes) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    AssemblerEditor.this.openTypeEditor(inst);
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent me) {
                super.mouseReleased(me);
                if(me.getButton()==3){
                    JTable table = (JTable) me.getSource();
                    Point point = me.getPoint();
                    int row = table.rowAtPoint(point);
                    String identifier = (String) table.getValueAt(row, 0);
                    InstructionType inst = null;
                    for (InstructionType in : AssemblerEditor.this.auxTypes) {
                        if (in.getIdentifier().equals(identifier)) {
                            inst = in;
                        }
                    }
                    ShowPopUp(inst,me);
                }
            }
        });
        JScrollPane sp = new JScrollPane(tableTypes);
        sp.setVisible(true);
        DefaultTableModel model = new DefaultTableModel(new String[]{"Identifier", "Sectors"}, 0);
        for (InstructionType inst : this.auxTypes) {
            Object[] row = new Object[2];
            row[0] = inst.getIdentifier();
            row[1] = Arrays.toString(inst.getFormat().getSectionsNames()).replaceAll("\\[", "").replaceAll("\\]", "");
            model.addRow(row);
        }
        tableTypes.setModel(model);
        tableTypes.setVisible(true);
        tableTypes.setEnabled(false);
        this.tabLines.setComponentAt(4, sp);
    }

    private void openVarUsageCreator() {
        new VarUsageEditor(this).setVisible(true);
        this.setEnabled(false);
    }

    private void openTypeCreator() {
        new TypeEditor(this).setVisible(true);
        this.setEnabled(false);
    }

    private void openSintaxValuesEditor() {
        new SintaxValuesEditor(this).setVisible(true);
        this.setEnabled(false);
    }

    void deleteInstruction(Instruction instruction) {
        this.auxInstructions.remove(instruction);
    }

    void deleteLine(Line line) {
        this.auxLines.remove(line);
    }

    void deleteType(InstructionType type) {
        this.auxTypes.remove(type);
    }

    void deleteVarUsage(Line var) {
        this.auxVarUsages.remove(var);
    }
}
