package com.ensamblatore;

import com.ensamblatore.core.architecture.Architecture;
import com.ensamblatore.core.architecture.memory.Memory;
import com.ensamblatore.core.assembler.Assembler;
import com.ensamblatore.core.assembler.instruction.Directive;
import com.ensamblatore.core.assembler.instruction.InstructionType;
import com.ensamblatore.core.assembler.instruction.Line;
import com.ensamblatore.core.CPU;
import com.ensamblatore.core.fileManager.Serializer;
import com.ensamblatore.core.gui.ArchitectureDataEditor;
import com.ensamblatore.core.gui.AssemblerEditor;
import com.ensamblatore.core.gui.CPUDataEditor;
import com.ensamblatore.core.gui.DialogCreator;
import com.ensamblatore.core.gui.HelpData;
import com.ensamblatore.core.gui.HelpDialog;
import com.ensamblatore.core.gui.MemoriesEditor;
import com.ensamblatore.core.gui.MemoryPane;
import com.ensamblatore.core.gui.ProgramEditor;

import java.io.File;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author emnga
 */
public class EnsamblatoreApplication extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public CPU cpu = new CPU();
    JFileChooser fc;
    FileFilter cp = new FileNameExtensionFilter("Ensablatore CPU file", Serializer.CPU_EXTENSION);
    FileFilter ass = new FileNameExtensionFilter("Ensamblatore assembler file", Serializer.ASSEMBLER_EXTENSION);
    FileFilter arch = new FileNameExtensionFilter("Emsablatore architecture file", Serializer.ARCHITECTURE_EXTENSION);
    FileFilter txt = new FileNameExtensionFilter("Text files", Serializer.TEXT_EXTENSION);
    FileFilter prog = new FileNameExtensionFilter("Ensamblatore program file", Serializer.PROGRAM_EXTENSION);

    public EnsamblatoreApplication() {
        initComponents();
        fc = new JFileChooser(System.getProperty("user.home") + File.separator + "Documents");
        fc.resetChoosableFileFilters();
        fc.setMultiSelectionEnabled(false);
        fc.setAcceptAllFileFilterUsed(false);
        Line.init(cpu.getAssembler());
        Directive.init(cpu.getAssembler());
        initData();
        initAssemblerTable();
        initMemoriesPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        txtarWordSize = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txtarMemories = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        txtarPCIncrement = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtarEndianism = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        txtarProgramIREG = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        txtarDataIREG = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        tabpaneMemories = new javax.swing.JTabbedPane();
        spnrAdresses = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        btnShowAdresses = new javax.swing.JButton();
        spnrStartingAdress = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        txtasNoInstructions = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        txtasInstrTypes = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        txtasValEmptySectors = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableAssembler = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtcName = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtcDescription = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtcVersionCode = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtcVersionName = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        menuNewCPU = new javax.swing.JMenuItem();
        menuNewAssembler = new javax.swing.JMenuItem();
        menuNewProgram = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuSaveCPU = new javax.swing.JMenuItem();
        menuSaveArchitecture = new javax.swing.JMenuItem();
        menuSaveAssembler = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        menuEditCPU = new javax.swing.JMenuItem();
        menuEditArchitecture = new javax.swing.JMenuItem();
        menuEditAssembler = new javax.swing.JMenuItem();
        menuEditMemories = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Ensamblatore");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setSize(new java.awt.Dimension(600, 320));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Architecture data"));

        jPanel2.setLayout(new java.awt.GridLayout(14, 1));

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel22.setText("Word Size");
        jPanel2.add(jLabel22);

        txtarWordSize.setText("vc");
        jPanel2.add(txtarWordSize);

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel26.setText("Memories");
        jPanel2.add(jLabel26);

        txtarMemories.setText("vc");
        jPanel2.add(txtarMemories);

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel28.setText("PC Increment");
        jPanel2.add(jLabel28);

        txtarPCIncrement.setText("vc");
        jPanel2.add(txtarPCIncrement);

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel30.setText("Endianism");
        jPanel2.add(jLabel30);

        txtarEndianism.setText("vc");
        jPanel2.add(txtarEndianism);

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel32.setText("Program initial register");
        jPanel2.add(jLabel32);

        txtarProgramIREG.setText("vc");
        jPanel2.add(txtarProgramIREG);

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel34.setText("Data initial register");
        jPanel2.add(jLabel34);

        txtarDataIREG.setText("vc");
        jPanel2.add(txtarDataIREG);

        jScrollPane1.setViewportView(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Memories"));

        spnrAdresses.setModel(new javax.swing.SpinnerNumberModel(10, 10, 100, 10));

        jLabel2.setText("Adresses to show");

        btnShowAdresses.setText("Update view");
        btnShowAdresses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAdressesActionPerformed(evt);
            }
        });

        spnrStartingAdress.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel3.setText("Starting address");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spnrAdresses)
                    .addComponent(spnrStartingAdress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                        .addComponent(btnShowAdresses)
                        .addGap(57, 57, 57))))
            .addComponent(tabpaneMemories)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(tabpaneMemories, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnShowAdresses)
                            .addComponent(spnrStartingAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spnrAdresses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Assembler data"));

        jPanel5.setLayout(new java.awt.GridLayout(14, 1));

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel23.setText("Number of instructions");
        jPanel5.add(jLabel23);

        txtasNoInstructions.setText("vc");
        jPanel5.add(txtasNoInstructions);

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setText("Instruction types");
        jPanel5.add(jLabel25);

        txtasInstrTypes.setText("vc");
        jPanel5.add(txtasInstrTypes);

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setText("Validate empty sectors?");
        jPanel5.add(jLabel27);

        txtasValEmptySectors.setText("vc");
        jPanel5.add(txtasValEmptySectors);

        jScrollPane2.setViewportView(jPanel5);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Assembler"));

        tableAssembler.setEnabled(false);
        tableAssembler.setFillsViewportHeight(true);
        jScrollPane3.setViewportView(tableAssembler);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("CPU Data"));

        jPanel1.setLayout(new java.awt.GridLayout(8, 1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Name");
        jPanel1.add(jLabel1);

        txtcName.setText("name");
        jPanel1.add(txtcName);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Description");
        jPanel1.add(jLabel9);

        txtcDescription.setText("description");
        jPanel1.add(txtcDescription);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Version code");
        jPanel1.add(jLabel17);

        txtcVersionCode.setText("vc");
        jPanel1.add(txtcVersionCode);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Version name");
        jPanel1.add(jLabel4);

        txtcVersionName.setText("vn");
        jPanel1.add(txtcVersionName);

        jScrollPane4.setViewportView(jPanel1);

        jMenu1.setText("File");

        jMenu3.setText("New");
        jMenu3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jMenu3.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        menuNewCPU.setText("CPU");
        menuNewCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewCPUActionPerformed(evt);
            }
        });
        jMenu3.add(menuNewCPU);

        menuNewAssembler.setText("Assembler");
        menuNewAssembler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewAssemblerActionPerformed(evt);
            }
        });
        jMenu3.add(menuNewAssembler);

        menuNewProgram.setText("Program");
        menuNewProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewProgramActionPerformed(evt);
            }
        });
        jMenu3.add(menuNewProgram);

        jMenu1.add(jMenu3);

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setText("Open");
        menuOpen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        menuOpen.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpen);

        jMenu2.setText("Save");
        jMenu2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jMenu2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        menuSaveCPU.setText("CPU");
        menuSaveCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveCPUActionPerformed(evt);
            }
        });
        jMenu2.add(menuSaveCPU);

        menuSaveArchitecture.setText("Architecture");
        menuSaveArchitecture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveArchitectureActionPerformed(evt);
            }
        });
        jMenu2.add(menuSaveArchitecture);

        menuSaveAssembler.setText("Assembler");
        menuSaveAssembler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveAssemblerActionPerformed(evt);
            }
        });
        jMenu2.add(menuSaveAssembler);

        jMenu1.add(jMenu2);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Edit");

        menuEditCPU.setText("CPU Data");
        menuEditCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditCPUActionPerformed(evt);
            }
        });
        jMenu4.add(menuEditCPU);

        menuEditArchitecture.setText("Architecture");
        menuEditArchitecture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditArchitectureActionPerformed(evt);
            }
        });
        jMenu4.add(menuEditArchitecture);

        menuEditAssembler.setText("Assembler");
        menuEditAssembler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditAssemblerActionPerformed(evt);
            }
        });
        jMenu4.add(menuEditAssembler);

        menuEditMemories.setText("Memories");
        menuEditMemories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditMemoriesActionPerformed(evt);
            }
        });
        jMenu4.add(menuEditMemories);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("?");

        jMenuItem1.setText("Help");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem1);

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem2);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuNewCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewCPUActionPerformed
        int selection = DialogCreator.createYesNoDialog(this, "This will delete all unsaved data for:\nCPU, Assembler and Architecture.\nContinue?", "WARNING");
        if (selection == 0) {
            this.cpu = new CPU();
            Line.init(cpu.getAssembler());
            Directive.init(cpu.getAssembler());
            initData();
            initMemoriesPanel();
            initAssemblerTable();
        }
    }//GEN-LAST:event_menuNewCPUActionPerformed

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        fc.resetChoosableFileFilters();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.addChoosableFileFilter(cp);
        fc.addChoosableFileFilter(ass);
        fc.addChoosableFileFilter(arch);
        fc.addChoosableFileFilter(txt);
        fc.addChoosableFileFilter(prog);
        int state = fc.showOpenDialog(this);
        File fil;
        if (state == JFileChooser.APPROVE_OPTION) {
            fil = fc.getSelectedFile();
            handleFile(fil);
        }
    }//GEN-LAST:event_menuOpenActionPerformed

    private void btnShowAdressesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAdressesActionPerformed
        if (this.cpu.getArchitecture().getMemoriesCount() > 0) {
            updateSelectedMemory(this.tabpaneMemories.getSelectedIndex());
        }
    }//GEN-LAST:event_btnShowAdressesActionPerformed

    private void menuEditCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditCPUActionPerformed
        openCPUEditor();
    }//GEN-LAST:event_menuEditCPUActionPerformed

    private void menuEditArchitectureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditArchitectureActionPerformed
        openArchitectureEditor();
    }//GEN-LAST:event_menuEditArchitectureActionPerformed

    private void menuNewProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewProgramActionPerformed
        openProgramEditor();
    }//GEN-LAST:event_menuNewProgramActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        int sel = DialogCreator.createYesNoDialog(this, "Are you sure?", "Exiting");
        if (sel == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_menuExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int sel = DialogCreator.createYesNoDialog(this, "Are you sure?", "Exiting");
        if (sel == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void menuSaveCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveCPUActionPerformed
        fc.resetChoosableFileFilters();
        fc.addChoosableFileFilter(cp);
        File file = fc.getSelectedFile();
        if (file != null) {
            String newPath = file.getAbsolutePath();
            if (newPath.contains(".")) {
                String ext = newPath.substring(newPath.lastIndexOf("."));
                if (ext.equals(Serializer.CPU_EXTENSION)) {
                    newPath = newPath.substring(0, newPath.lastIndexOf("."));
                    fc.setSelectedFile(new File(newPath));
                }
            }
        }
        int sel = fc.showSaveDialog(this);
        if (sel == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            String newPath = file.getAbsolutePath();
            String ext = fc.getFileFilter().getDescription();
            if (newPath.contains(".")) {
                if (newPath.endsWith(Serializer.CPU_EXTENSION)) {
                    new Serializer().writeObjectFile(newPath, this.cpu);
                }
            } else {
                newPath += "." + Serializer.CPU_EXTENSION;
                new Serializer().writeObjectFile(newPath, this.cpu);
            }
        }
    }//GEN-LAST:event_menuSaveCPUActionPerformed

    private void menuSaveArchitectureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveArchitectureActionPerformed
        fc.resetChoosableFileFilters();
        fc.addChoosableFileFilter(arch);
        File file = fc.getSelectedFile();
        if (file != null) {
            String newPath = file.getAbsolutePath();
            if (newPath.contains(".")) {
                String ext = newPath.substring(newPath.lastIndexOf("."));
                if (ext.equals(Serializer.ARCHITECTURE_EXTENSION)) {
                    newPath = newPath.substring(0, newPath.lastIndexOf("."));
                    fc.setSelectedFile(new File(newPath));
                }
            }
        }
        int sel = fc.showSaveDialog(this);
        if (sel == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            String newPath = file.getAbsolutePath();
            String ext = fc.getFileFilter().getDescription();
            if (newPath.contains(".")) {
                if (newPath.endsWith(Serializer.ARCHITECTURE_EXTENSION)) {
                    new Serializer().writeObjectFile(newPath, this.cpu.getArchitecture());
                }
            } else {
                newPath += "." + Serializer.ARCHITECTURE_EXTENSION;
                new Serializer().writeObjectFile(newPath, this.cpu.getArchitecture());
            }
        }
    }//GEN-LAST:event_menuSaveArchitectureActionPerformed

    private void menuSaveAssemblerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveAssemblerActionPerformed
        fc.resetChoosableFileFilters();
        fc.addChoosableFileFilter(ass);
        File file = fc.getSelectedFile();
        if (file != null) {
            String newPath = file.getAbsolutePath();
            if (newPath.contains(".")) {
                String ext = newPath.substring(newPath.lastIndexOf("."));
                if (ext.equals(Serializer.ASSEMBLER_EXTENSION)) {
                    newPath = newPath.substring(0, newPath.lastIndexOf("."));
                    fc.setSelectedFile(new File(newPath));
                }
            }
        }
        int sel = fc.showSaveDialog(this);
        if (sel == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            String newPath = file.getAbsolutePath();
            if (newPath.contains(".")) {
                if (newPath.endsWith(Serializer.ASSEMBLER_EXTENSION)) {
                    new Serializer().writeObjectFile(newPath, this.cpu.getAssembler());
                }
            } else {
                newPath += "." + Serializer.ASSEMBLER_EXTENSION;
                new Serializer().writeObjectFile(newPath, this.cpu.getAssembler());
            }
        }
    }//GEN-LAST:event_menuSaveAssemblerActionPerformed

    private void menuEditAssemblerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditAssemblerActionPerformed
        openAssemblerEditor();
    }//GEN-LAST:event_menuEditAssemblerActionPerformed

    private void menuNewAssemblerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewAssemblerActionPerformed
        int selection = DialogCreator.createYesNoDialog(this, "This will delete all unsaved data fors:\nAssembler.\nContinue?", "WARNING");
        if (selection == 0) {
            this.cpu.setAssembler(new Assembler(this.cpu));
            Line.init(cpu.getAssembler());
            Directive.init(cpu.getAssembler());
            initData();
            initAssemblerTable();
        }
    }//GEN-LAST:event_menuNewAssemblerActionPerformed

    private void menuEditMemoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditMemoriesActionPerformed
        openMemoriesEditor();
    }//GEN-LAST:event_menuEditMemoriesActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new HelpDialog(HelpDialog.ID_MAIN).setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        DialogCreator.createCustomDialog(this, "About", "Developed by:\nRicardo Montes Hernández\nricardo.mh95@hotmail.com", HelpData.ICON);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnsamblatoreApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnsamblatoreApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnsamblatoreApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnsamblatoreApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //com.ensamblatore.tetsGeneral.main(args);
                EnsamblatoreApplication main = new EnsamblatoreApplication();
                main.handleFile(new File("real.encpu"));
                new EnsamblatoreApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnShowAdresses;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenuItem menuEditArchitecture;
    private javax.swing.JMenuItem menuEditAssembler;
    private javax.swing.JMenuItem menuEditCPU;
    private javax.swing.JMenuItem menuEditMemories;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuNewAssembler;
    private javax.swing.JMenuItem menuNewCPU;
    private javax.swing.JMenuItem menuNewProgram;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuSaveArchitecture;
    private javax.swing.JMenuItem menuSaveAssembler;
    private javax.swing.JMenuItem menuSaveCPU;
    private javax.swing.JSpinner spnrAdresses;
    private javax.swing.JSpinner spnrStartingAdress;
    private javax.swing.JTable tableAssembler;
    private javax.swing.JTabbedPane tabpaneMemories;
    private javax.swing.JLabel txtarDataIREG;
    private javax.swing.JLabel txtarEndianism;
    private javax.swing.JLabel txtarMemories;
    private javax.swing.JLabel txtarPCIncrement;
    private javax.swing.JLabel txtarProgramIREG;
    private javax.swing.JLabel txtarWordSize;
    private javax.swing.JLabel txtasInstrTypes;
    private javax.swing.JLabel txtasNoInstructions;
    private javax.swing.JLabel txtasValEmptySectors;
    private javax.swing.JLabel txtcDescription;
    private javax.swing.JLabel txtcName;
    private javax.swing.JLabel txtcVersionCode;
    private javax.swing.JLabel txtcVersionName;
    // End of variables declaration//GEN-END:variables

    private void initMemoriesPanel() {
        this.tabpaneMemories.removeAll();
        this.tabpaneMemories.add(new javax.swing.JLabel("No memories"));

    }

    private void initAssemblerTable() {
        tableAssembler = new javax.swing.JTable();
        tableAssembler.setEnabled(false);
        tableAssembler.setFillsViewportHeight(true);
        jScrollPane3.setViewportView(tableAssembler);
    }

    private void initData() {
        this.txtcName.setText(this.cpu.getName());
        this.txtcDescription.setText(cpu.getVersionDescription());
        this.txtcVersionCode.setText(Integer.toString(this.cpu.getVersionCode()));
        this.txtcVersionName.setText(cpu.getVersionName());
        Architecture ar = cpu.getArchitecture();
        this.txtarDataIREG.setText(Integer.toString(ar.getDataInitialRegister()));
        this.txtarEndianism.setText(ar.getEndianism().toString());
        String[] memories = ar.getMemoriesNames();
        if (memories.length < 1) {
            this.txtarMemories.setText("No memories");
        } else {
            String aux = Arrays.toString(memories).replace("[", "".replace("]", ""));
            this.txtarMemories.setText(aux);
        }
        this.txtarPCIncrement.setText(Integer.toString(ar.getPCincrement()));
        this.txtarProgramIREG.setText(Integer.toString(ar.getProgramInitialRegister()));
        this.txtarWordSize.setText(Integer.toString(ar.getWordSize()));
        this.txtasInstrTypes.setText("No instruction types");
        this.txtasNoInstructions.setText("0");
        this.txtasValEmptySectors.setText("Unknown");
    }

    private void handleFile(File file) {
        String name = file.getName();
        Serializer ser;
        if (name.endsWith("." + Serializer.CPU_EXTENSION)) {
            ser = new Serializer();
            Object obj = ser.readObjectFile(file);
            if (obj instanceof CPU) {
                if (DialogCreator.createYesNoDialog(this, "This will replace the current data with\nthe file data\nDo you wish to continue?", "Open file?") == JOptionPane.YES_OPTION) {
                    this.updateCPUData((CPU) obj);
                }
            } else {
                DialogCreator.createErrorDialog(this, "Error", "Invalid or corrupted file.");
            }
        } else if (name.endsWith("." + Serializer.ASSEMBLER_EXTENSION)) {
            ser = new Serializer();
            Object obj = ser.readObjectFile(file);
            if (obj instanceof Assembler) {
                if (DialogCreator.createYesNoDialog(this, "Changing architecture data can cause\nmalfunction on some instructions\nand memory operations.\nDo You wish to continue?", "Attention") == JOptionPane.YES_OPTION) {
                    this.updateAssemblerData((Assembler) obj);
                }
            } else {
                DialogCreator.createErrorDialog(this, "Error", "Invalid or corrupted file.");
            }
        } else if (name.endsWith("." + Serializer.ARCHITECTURE_EXTENSION)) {
            ser = new Serializer();
            Object obj = ser.readObjectFile(file);
            if (obj instanceof Architecture) {
                if (DialogCreator.createYesNoDialog(this, "This operation will overwrite current\nassembler instructions and sintaxes.\nDo you wish to continue?", "Attention") == JOptionPane.YES_OPTION) {
                    this.updateArchitetureData((Architecture) obj);
                }
            } else {
                DialogCreator.createErrorDialog(this, "Error", "Invalid or corrupted file.");
            }
        } else if (name.endsWith("." + Serializer.TEXT_EXTENSION) || name.endsWith("." + Serializer.PROGRAM_EXTENSION)) {
            openProgramEditor(file);
        } else {
            DialogCreator.createErrorDialog(this, "Error", "Invalid file");
        }
    }

    private void updateCPUData(CPU cpu) {
        this.cpu = new CPU(cpu);
        Directive.init(this.cpu.getAssembler());
        Line.init(this.cpu.getAssembler());
        this.txtcDescription.setText(this.cpu.getVersionDescription());
        this.txtcName.setText(this.cpu.getName());
        this.txtcVersionCode.setText(Integer.toString(this.cpu.getVersionCode()));
        if (this.cpu.architecture != null) {
            this.updateArchitetureData(this.cpu.getArchitecture());
        }
        if (this.cpu.getAssembler() != null) {
            this.updateAssemblerData(this.cpu.getAssembler());
        }
    }

    public void updateArchitectureData(String big, String data, String little, String program, int wordSize, int PCIncrement, int pIREG, int dIREG, Architecture.Endianess endianess) {
        Architecture arc;
        if (this.cpu.getArchitecture() == null) {
            this.cpu.architecture = new Architecture();

        }
        arc = this.cpu.getArchitecture();
        Architecture.BIGENDIANNAME = big;
        Architecture.DATAMEMORYNAME = data;
        Architecture.LITTLEENDIANNAME = little;
        Architecture.PROGRAMMEMORYNAME = program;
        arc.setWordSize(wordSize);
        arc.setPCincrement(PCIncrement);
        arc.setDataInitialRegister(dIREG);
        arc.setProgramInitialRegister(pIREG);
        arc.setEndianism(endianess);
        this.updateArchitectureDataDraw();
    }

    private void updateAssemblerData(Assembler assembler) {
        this.cpu.setAssembler(assembler);
        Directive.init(this.cpu.getAssembler());
        Line.init(this.cpu.getAssembler());
        Assembler as = this.cpu.getAssembler();
        StringBuilder sb = new StringBuilder();
        for (InstructionType type : as.getInstructionTypes()) {
            sb.append(type.getIdentifier()).append(",");
        }
        this.txtasInstrTypes.setText(sb.toString());
        this.txtasNoInstructions.setText(Integer.toString(as.getInstructions().size()));
        this.txtasValEmptySectors.setText(Boolean.toString(as.canHaveEmptySectors));
        DefaultTableModel model = new DefaultTableModel(new String[]{"Type", "Identifier", "Default", "O. sintax", "P. sintax"}, 0);
        this.addDirectives(model);
        this.addLines(model);
        this.addInstructions(model);
        this.addVarUsages(model);
        this.tableAssembler.setModel(model);

    }

    private void updateArchitetureData(Architecture architecture) {
        this.cpu.setArchitecture(architecture);
        Architecture ar = this.cpu.getArchitecture();
        this.txtarDataIREG.setText(Integer.toString(ar.getDataInitialRegister()));
        this.txtarEndianism.setText(ar.getEndianism().toString());
        String[] memories = ar.getMemoriesNames();
        if (memories.length < 1) {
            this.txtarMemories.setText("No memories");
        } else {
            String aux = Arrays.toString(memories).replace("[", "").replace("]", "");
            this.txtarMemories.setText(aux);
        }
        this.txtarPCIncrement.setText(Integer.toString(ar.getPCincrement()));
        this.txtarProgramIREG.setText(Integer.toString(ar.getProgramInitialRegister()));
        this.txtarWordSize.setText(Integer.toString(ar.getWordSize()));
        this.updateMemories();
    }

    private void updateMemories() {
        this.tabpaneMemories.removeAll();
        Memory[] memories = this.cpu.getArchitecture().getMemory();
        MemoryPane[] panes = new MemoryPane[memories.length];
        for (int i = 0; i < memories.length; i++) {
            panes[i] = new MemoryPane(memories[i]);
            panes[i].setVisibleAdresses(Integer.parseInt(spnrStartingAdress.getValue().toString()), Integer.parseInt(spnrAdresses.getValue().toString()));
            this.tabpaneMemories.addTab(memories[i].getIdentifier(), panes[i]);
            panes[i].setVisible(true);
        }
    }

    private void updateSelectedMemory(int selectedIndex) {
        MemoryPane pane = (MemoryPane) this.tabpaneMemories.getComponentAt(selectedIndex);
        pane.setVisibleAdresses(Integer.parseInt(spnrStartingAdress.getValue().toString()), Integer.parseInt(spnrAdresses.getValue().toString()));
    }

    private void addDirectives(DefaultTableModel model) {
        Object[] object;
        for (int i = 0; i < Directive.DEFAULT_DIRECTIVES.size(); i++) {
            Directive got = Directive.DEFAULT_DIRECTIVES.get(i);
            object = new Object[5];
            object[0] = "Directive";
            object[1] = got.identifier;
            object[2] = "Yes";
            object[3] = got.sintax.getOriginal();
            object[4] = got.sintax.getRegex();
            model.addRow(object);
        }
    }

    private void addLines(DefaultTableModel model) {
        Object[] object;
        for (Line line : Line.DEFAULTLINES) {
            object = new Object[5];
            object[0] = "Line";
            object[1] = line.identifier;
            object[2] = "Yes";
            object[3] = line.sintax.getOriginal();
            object[4] = line.sintax.getRegex();
            model.addRow(object);
        }
        for (Line line : this.cpu.getAssembler().get_Lines()) {
            object = new Object[5];
            object[0] = "Line";
            object[1] = line.identifier;
            object[2] = "No";
            object[3] = line.sintax.getOriginal();
            object[4] = line.sintax.getRegex();
            model.addRow(object);
        }
    }

    private void addInstructions(DefaultTableModel model) {
        Object[] object;
        for (Line line : this.cpu.getAssembler().get_Instructions()) {
            object = new Object[5];
            object[0] = "Instruction";
            object[1] = line.identifier;
            object[2] = "No";
            object[3] = line.sintax.getOriginal();
            object[4] = line.sintax.getRegex();
            model.addRow(object);
        }
    }

    private void addVarUsages(DefaultTableModel model) {
        Object[] object;
        for (Line line : this.cpu.getAssembler().get_Varusages()) {
            object = new Object[5];
            object[0] = "Variable usage";
            object[1] = line.identifier;
            object[2] = "No";
            object[3] = line.sintax.getOriginal();
            object[4] = line.sintax.getRegex();
            model.addRow(object);
        }
    }

    private void updateArchitectureDataDraw() {
        Architecture ar = this.cpu.getArchitecture();
        this.txtarDataIREG.setText(Integer.toString(ar.getDataInitialRegister()));
        this.txtarEndianism.setText(ar.getEndianism().toString());
        String[] memories = ar.getMemoriesNames();
        if (memories.length < 1) {
            this.txtarMemories.setText("No memories");
        } else {
            String aux = Arrays.toString(memories).replace("[", "").replace("]", "");
            this.txtarMemories.setText(aux);
        }
        this.txtarPCIncrement.setText(Integer.toString(ar.getPCincrement()));
        this.txtarProgramIREG.setText(Integer.toString(ar.getProgramInitialRegister()));
        this.txtarWordSize.setText(Integer.toString(ar.getWordSize()));
    }

    public void updateCPUData(String name, int vc, String vd, String vn) {
        this.cpu.setName(name);
        this.cpu.setVersionCode(vc);
        this.cpu.setVersionDescription(vd);
        this.cpu.setVersionName(vn);
        this.updateCPUDataDraw();
    }

    private void updateCPUDataDraw() {
        this.txtcDescription.setText(cpu.getVersionDescription());
        this.txtcName.setText(cpu.getName());
        this.txtcVersionCode.setText(Integer.toString(cpu.getVersionCode()));
        this.txtcVersionName.setText(cpu.getVersionName());
    }

    public void openProgramEditor(File file) {
        new ProgramEditor(this, file).setVisible(true);
        this.setVisible(false);
    }

    private void openProgramEditor() {
        new ProgramEditor(this).setVisible(true);
        this.setVisible(false);
    }

    private void openAssemblerEditor() {
        new AssemblerEditor(this).setVisible(true);
        this.setEnabled(false);

    }

    private void openArchitectureEditor() {
        new ArchitectureDataEditor(this).setVisible(true);
        this.setEnabled(false);
    }

    private void openCPUEditor() {
        new CPUDataEditor(this).setVisible(true);
        this.setEnabled(false);
    }

    public void updateAssemblerData() {
        Assembler as = this.cpu.getAssembler();
        StringBuilder sb = new StringBuilder();
        for (InstructionType type : as.getInstructionTypes()) {
            sb.append(type.getIdentifier()).append(",");
        }
        this.txtasInstrTypes.setText(sb.toString());
        this.txtasNoInstructions.setText(Integer.toString(as.getInstructions().size()));
        this.txtasValEmptySectors.setText(Boolean.toString(as.canHaveEmptySectors));
        DefaultTableModel model = new DefaultTableModel(new String[]{"Type", "Identifier", "Default", "O. sintax", "P. sintax"}, 0);
        this.addDirectives(model);
        this.addLines(model);
        this.addInstructions(model);
        this.addVarUsages(model);
        this.tableAssembler.setModel(model);
    }

    private void openMemoriesEditor() {
        new MemoriesEditor(this).setVisible(true);
        this.setEnabled(false);
    }

    public void updateArchitectureData() {
        updateArchitectureDataDraw();
        updateMemories();
    }

    public boolean exportMemory(Memory memory) {
        fc.resetChoosableFileFilters();
        fc.addChoosableFileFilter(txt);
        File file = fc.getSelectedFile();
        if (file != null) {
            String newPath = file.getAbsolutePath();
            if (newPath.contains(".")) {
                String ext = newPath.substring(newPath.lastIndexOf("."));
                if (ext.equals(Serializer.TEXT_EXTENSION)) {
                    newPath = newPath.substring(0, newPath.lastIndexOf("."));
                    fc.setSelectedFile(new File(newPath));
                }
                else{
                    fc.setSelectedFile(new File(""));
                }
            }
        }
        int sel = fc.showSaveDialog(this);
        if (sel == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            String newPath = file.getAbsolutePath();
            String ext = fc.getFileFilter().getDescription();
            if (newPath.contains(".")) {
                 if (newPath.endsWith(Serializer.TEXT_EXTENSION)) {
                    new Serializer().writeTextFile(newPath, Arrays.toString(memory.data).replaceAll("\\[", "").replaceAll("\\]", "").replaceAll(",", "\n").replaceAll(" ", ""));
                    return true;
                }
            } else if (fc.getFileFilter().getDescription().contains("Text")) {
                newPath += "." + Serializer.TEXT_EXTENSION;
                new Serializer().writeTextFile(newPath, Arrays.toString(memory.data).replaceAll("\\[", "").replaceAll("\\]", "").replaceAll(",", "\n").replaceAll(" ", ""));
                return true;
            }
        }
        return false;
    }

    public void saveProgram(String program) {
        fc.resetChoosableFileFilters();
        fc.addChoosableFileFilter(txt);
        fc.addChoosableFileFilter(prog);
        File file = fc.getSelectedFile();
        if (file != null) {
            String newPath = file.getAbsolutePath();
            if (newPath.contains(".")) {
                String ext = newPath.substring(newPath.lastIndexOf("."));
                if (ext.equals(Serializer.TEXT_EXTENSION) || ext.equals(Serializer.PROGRAM_EXTENSION)) {
                    newPath = newPath.substring(0, newPath.lastIndexOf("."));
                    fc.setSelectedFile(new File(newPath));
                }
            }
        }
        int sel = fc.showSaveDialog(this);
        if (sel == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            String newPath = file.getAbsolutePath();
            String ext = fc.getFileFilter().getDescription();
            if (newPath.contains(".")) {
                 if (newPath.endsWith(Serializer.TEXT_EXTENSION)) {
                    new Serializer().writeTextFile(newPath, program);
                }
                 else if (newPath.endsWith(Serializer.PROGRAM_EXTENSION)) {
                    new Serializer().writeObjectFile(newPath, program);
                }
            } else if (fc.getFileFilter().getDescription().contains("Text")) {
                newPath += "." + Serializer.TEXT_EXTENSION;
                new Serializer().writeTextFile(newPath, program);
            } else if (fc.getFileFilter().getDescription().contains("program")) {
                newPath += "." + Serializer.PROGRAM_EXTENSION;
                new Serializer().writeObjectFile(newPath, program);
            }
        }
    }

    public void openProgram() {
        fc.resetChoosableFileFilters();
        fc.addChoosableFileFilter(txt);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setSelectedFile(new File(""));
        int state = fc.showOpenDialog(this);
        File fil;
        if (state == JFileChooser.APPROVE_OPTION) {
            fil = fc.getSelectedFile();
            handleFile(fil);
        }
    }
}
