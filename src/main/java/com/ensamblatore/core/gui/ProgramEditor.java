/*
 * Copyright (C) 2017 emnga
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.ensamblatore.core.gui;

import com.ensamblatore.core.architecture.memory.Memory;
import com.ensamblatore.core.architecture.Word;
import com.ensamblatore.core.assembler.instruction.Directive;
import com.ensamblatore.core.assembler.instruction.Line;
import com.ensamblatore.core.assembler.instruction.Value;
import com.ensamblatore.core.fileManager.DB_Tokenizer;
import com.ensamblatore.core.fileManager.Serializer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import com.ensamblatore.EnsamblatoreApplication;

/**
 *
 * @author emnga
 */
public class ProgramEditor extends javax.swing.JFrame {

    /**
     * Creates new form ProgramEditor
     */
    EnsamblatoreApplication parent;
    TextLineNumber tln;
    Word[] assembledData=null;
    Word[][] memoriesInitialStates;
    boolean isAssembled=false;
    Value[] binaryValues;
    Value[] hexValues;
    Value[] octValues;
    Value[] intValues;
    StringBuilder binaryString;
    StringBuilder hexString;
    StringBuilder octString;
    StringBuilder intString;
    
    public ProgramEditor(EnsamblatoreApplication parent) {
        this.parent=parent;
        initComponents();
        rbBinary.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(isAssembled){
                    txtAD.setText(binaryString.toString());
                }
            }
        });
        rbDec.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(isAssembled){
                    txtAD.setText(intString.toString());
                }
            }
        });
        rbHex.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(isAssembled){
                    txtAD.setText(hexString.toString());
                }
            }
        });
        rbOct.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(isAssembled){
                    txtAD.setText(octString.toString());
                }
            }
        });
        initNumbers();
        for(int i=0; i<parent.cpu.architecture.getMemory().length; i++){
            Memory got=parent.cpu.architecture.getMemory()[i];
            JMenuItem newItem=new JMenuItem(got.getIdentifier());
            newItem.addActionListener((ActionEvent ae) -> {
                if(assembledData==null || assembledData.length<1){
                    DialogCreator.createMessageDialog(this, "No data to export");
                    return;
                }
                ProgramEditor.this.parent.exportMemory(got);
            });
            menuMemory.add(newItem);
        }
        DefaultCaret caret = (DefaultCaret)txtLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        if(this.parent.cpu.getAssembler().getInstructions().size()>0){
            fillTables();
        }
        else{
            fillDirectives();
        }
        this.memoriesInitialStates=new Word[this.parent.cpu.getArchitecture().getMemory().length][];
        for(int i=0; i<memoriesInitialStates.length; i++){
            this.memoriesInitialStates[i]=this.parent.cpu.getArchitecture().getMemory()[i].getData().clone();
        }
    }
    
    public ProgramEditor(EnsamblatoreApplication parent, File file){
        this(parent);
        String program;
        if(file.getName().endsWith(Serializer.TEXT_EXTENSION)){
            program=DB_Tokenizer.fileToString(file);
        }
        else{
            Object aux=new Serializer().readObjectFile(file);
            program=aux.toString();
        }
        this.txtProgram.setText(program);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtProgram = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableLines = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDirectives = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtAD = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        rbBinary = new javax.swing.JRadioButton();
        rbHex = new javax.swing.JRadioButton();
        rbDec = new javax.swing.JRadioButton();
        rbOct = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuMemory = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Program editor");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onClosing(evt);
            }
        });

        txtProgram.setColumns(20);
        txtProgram.setLineWrap(true);
        txtProgram.setRows(5);
        txtProgram.setTabSize(5);
        txtProgram.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtProgram);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("All instructions/lines"));

        tableLines.setEnabled(false);
        tableLines.setFillsViewportHeight(true);
        jScrollPane2.setViewportView(tableLines);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Directives"));

        tableDirectives.setEnabled(false);
        tableDirectives.setFillsViewportHeight(true);
        jScrollPane3.setViewportView(tableDirectives);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        txtLog.setEditable(false);
        txtLog.setColumns(20);
        txtLog.setRows(5);
        txtLog.setText("-Empty-");
        jScrollPane4.setViewportView(txtLog);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Assembled data"));

        jScrollPane5.setBorder(null);

        txtAD.setEditable(false);
        txtAD.setColumns(20);
        txtAD.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        txtAD.setRows(5);
        txtAD.setText("-Empty-");
        txtAD.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane5.setViewportView(txtAD);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonGroup1.add(rbBinary);
        rbBinary.setSelected(true);
        rbBinary.setText("Binary");

        buttonGroup1.add(rbHex);
        rbHex.setText("Hex");

        buttonGroup1.add(rbDec);
        rbDec.setText("Dec");

        buttonGroup1.add(rbOct);
        rbOct.setText("Oct");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(rbBinary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbHex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbDec)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbOct)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbBinary)
                    .addComponent(rbHex)
                    .addComponent(rbDec)
                    .addComponent(rbOct))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Run");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Open program");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Save program");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        menuMemory.setText("Export Memory");
        jMenu1.add(menuMemory);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem3.setText("Exit editor");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem6.setText("Clear all");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onClosing
        int sel = DialogCreator.createYesNoDialog(this, "Do you wanna exit the editor?", "Exiting");
        if (sel == 0) {
            this.parent.setVisible(true);
            this.parent.setEnabled(true);
            this.parent.toFront();
            this.restoreMemories();
            this.dispose();
        }
    }//GEN-LAST:event_onClosing

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        String program=txtProgram.getText();
        if(txtLog.getText().equals("-Empty-")){
            this.txtLog.setText("program running");
        }
        else{
            this.txtLog.append("\nprogram running");
        }
        assembledData=null;
        //try{
            assembledData=this.parent.cpu.getAssembler().runProgram(program);
        /*}
        catch(ParsingException e){
            this.txtLog.append("\n"+e.getMessage());
            this.txtLog.append("\nrun finished with errors");
            return;
        }
        catch(SintaxException e){
            this.txtLog.append("\nSintax error on: "+e.line);
            this.txtLog.append("\nrun finished with errors");
            return;
        }
        catch(AssemblyException e){
            this.txtLog.append("\nAssembly error: "+e.getMessage());
            this.txtLog.append("\nrun finished with errors");
            return;
        }
        catch(NumberFormatException e){
            return;
        }
        catch(Exception e){
            this.txtLog.append("\nError: "+e.getMessage());
            this.txtLog.append("\nrun finished with errors");
            return;
        }
            */
        if(assembledData==null || assembledData.length<1 || this.txtProgram.getText().isEmpty()){
            this.txtLog.append("\nInvalid program");
            this.txtLog.append("\nrun finished with errors");
            return;
        }
        this.txtLog.append("\nrun finshed");
        this.isAssembled=true;
        this.txtLog.append("\nConverting assembled code");
        this.txtAD.setText("");
        binaryValues=new Value[assembledData.length];
        hexValues = new Value[assembledData.length];
        octValues = new Value[assembledData.length];
        intValues = new Value[assembledData.length];
        //fill values array
        for(int i=0; i<assembledData.length; i++){
            binaryValues[i]=new Value(assembledData[i].toString(), Value.TYPE_BINARY, true);
            hexValues[i]=binaryValues[i].toHex();
            octValues[i]=binaryValues[i].toOctal();
            intValues[i]=binaryValues[i].toInteger();
        }
        //end fill values array
        
        //create strings to show
        binaryString= new StringBuilder();
        hexString= new StringBuilder();
        octString= new StringBuilder();
        intString= new StringBuilder();
        binaryString.append(binaryValues[0].getRawValue());
        hexString.append(hexValues[0].getRawValue());
        octString.append(octValues[0].getRawValue());
        intString.append(intValues[0].getRawValue());
        for(int i=1; i<assembledData.length; i++){
            binaryString.append('\n').append(binaryValues[i].getRawValue());
            hexString.append('\n').append(hexValues[i].getRawValue());
            octString.append('\n').append(octValues[i].getRawValue());
            intString.append('\n').append(intValues[i].getRawValue());

        }
        //end create strings
        this.txtLog.append("\nConversion finished");
        if(rbBinary.isSelected()){
            txtAD.setText(binaryString.toString());
        }
        else if(rbDec.isSelected()){
            txtAD.setText(intString.toString());
        }
        else if(rbHex.isSelected()){
            txtAD.setText(hexString.toString());
        }
        else if(rbOct.isSelected()){
            txtAD.setText(octString.toString());
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.parent.saveProgram(this.txtProgram.getText());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        int sel = DialogCreator.createYesNoDialog(this, "Do you wanna exit the editor?", "Exiting");
        if (sel == 0) {
            this.parent.setVisible(true);
            this.parent.setEnabled(true);
            this.parent.toFront();
            this.restoreMemories();
            this.dispose();
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        parent.openProgram();
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        this.txtProgram.setText("");
        this.txtLog.setText("-Empty-");
        this.txtAD.setText("-Empty-");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JMenu menuMemory;
    private javax.swing.JRadioButton rbBinary;
    private javax.swing.JRadioButton rbDec;
    private javax.swing.JRadioButton rbHex;
    private javax.swing.JRadioButton rbOct;
    private javax.swing.JTable tableDirectives;
    private javax.swing.JTable tableLines;
    private javax.swing.JTextArea txtAD;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextArea txtProgram;
    // End of variables declaration//GEN-END:variables

    private void initNumbers() {
        JPanel jp = new JPanel();
        this.jScrollPane1.add(jp);
        tln = new TextLineNumber(this.txtProgram);
        this.jScrollPane1.add(tln);
        this.jScrollPane1.setRowHeaderView(tln);
        this.pack();
    }
    
    private void fillTables(){
        fillInstructions();
        fillDirectives();
    }

    private void fillInstructions() {
        DefaultTableModel model=new DefaultTableModel(new String[]{"Identifier","Type id","Sintax"},0);
        for(Line line: this.parent.cpu.getAssembler().getInstructions()){
            Object[] obj=new Object[4];
            obj[0]=line.identifier;
            obj[1]=line.id;
            obj[2]=line.sintax.getOriginal();
            model.addRow(obj);
        }
        this.tableLines.setModel(model);
    }

    private void fillDirectives() {
        DefaultTableModel model=new DefaultTableModel(new String[]{"Identifier","Priority","Sintax"},0);
        for(Directive dir: Directive.DEFAULT_DIRECTIVES){
            Object[] obj=new Object[3];
            obj[0]=dir.identifier;
            obj[1]=dir.getPriority();
            obj[2]=dir.sintax.getOriginal();
            model.addRow(obj);
        }
        this.tableDirectives.setModel(model);
    }

    private void restoreMemories() {
        for(int i=0; i<this.parent.cpu.getArchitecture().getMemory().length;i++){
            this.parent.cpu.getArchitecture().getMemory()[i].data=this.memoriesInitialStates[i];
        }
    }
}
