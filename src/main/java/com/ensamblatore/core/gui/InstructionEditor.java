/*
 * Copyright (C) 2017 emnga
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.ensamblatore.core.gui;

import com.ensamblatore.core.architecture.Word;
import com.ensamblatore.core.assembler.instruction.Instruction;
import com.ensamblatore.core.assembler.instruction.InstructionType;
import com.ensamblatore.core.assembler.instruction.Line;
import com.ensamblatore.core.assembler.instruction.SectionValue;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author emnga
 */
public class InstructionEditor extends javax.swing.JFrame {

    /**
     * Creates new form InstructionEditor
     */
    public AssemblerEditor parent;
    public Instruction instruction;
    boolean isNew = false;
    public ArrayList<Line> auxInstructions;

    public final void initLists() {
        this.auxInstructions = new ArrayList<>();
        this.auxInstructions.addAll(parent.auxDirectives);
        this.auxInstructions.addAll(parent.auxInstructions);
        this.auxInstructions.addAll(parent.auxLines);
        this.auxInstructions.addAll(parent.auxVarUsages);
    }

    public InstructionEditor(AssemblerEditor parent) {
        this.parent = parent;
        initLists();
        initComponents();
        this.listPredefinedValues.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                JList list = (JList) evt.getSource();
                if (evt.getClickCount() == 2) {
                    int index = list.locationToIndex(evt.getPoint());
                    ((DefaultListModel) InstructionEditor.this.listPredefinedValues.getModel()).removeElementAt(index);
                }
            }
        });
        this.isNew = true;
        this.parent.auxTypes.stream().forEach((type) -> {
            this.cbType.addItem(type.getIdentifier());
        });
        this.cbType.addItemListener((ItemEvent ie) -> {
            int state1 = ie.getStateChange();
            if (state1 == ItemEvent.SELECTED) {
                InstructionEditor.this.updateSectionsCB(InstructionEditor.this.cbType.getSelectedIndex());
                this.txtTypeSections.setText(Arrays.toString(InstructionEditor.this.parent.auxTypes.get(InstructionEditor.this.cbType.getSelectedIndex()).getFormat().getSectionsNames()).replaceAll("\\[", "").replaceAll("\\]", "").replaceAll(", ", "\n"));
            }
        });
        for (int i = 0; i < this.parent.auxTypes.size(); i++) {
            if (this.parent.auxTypes.get(i).getIdentifier().equals(this.cbType.getSelectedItem().toString())) {
                this.updateSectionsCB(i);
                break;
            }
        }
        if(this.parent.auxTypes.size()>0){
            this.txtTypeSections.setText(Arrays.toString(this.parent.auxTypes.get(0).getFormat().getSectionsNames()).replaceAll("\\[", "").replaceAll("\\]", "").replaceAll(", ", "\n"));
        }
    }

    public InstructionEditor(AssemblerEditor parent, Instruction instruction) {
        this.parent = parent;
        initLists();
        this.instruction = instruction;
        initComponents();
        this.listPredefinedValues.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                JList list = (JList) evt.getSource();
                if (evt.getClickCount() == 2) {
                    int index = list.locationToIndex(evt.getPoint());
                    ((DefaultListModel) InstructionEditor.this.listPredefinedValues.getModel()).removeElementAt(index);
                }
            }
        });
        this.isNew = false;
        this.setTitle(this.getTitle() + this.instruction.getIdentifier());
        this.initData();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        txtIdentifier = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtSintax = new javax.swing.JTextField();
        chkOrder = new javax.swing.JCheckBox();
        txtDataOrder = new javax.swing.JTextField();
        btnAccept = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listPredefinedValues = new javax.swing.JList<>();
        cbSection = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtValue = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        cbType = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTypeSections = new javax.swing.JTextArea();
        lblActual = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Instruction Editor: ");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel5.setText("Identifier");

        jLabel6.setText("Sintax");

        chkOrder.setText("Specify data order");
        chkOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkOrderActionPerformed(evt);
            }
        });

        txtDataOrder.setEditable(false);
        txtDataOrder.setEnabled(false);

        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Predefined Section Values"));

        listPredefinedValues.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(listPredefinedValues);

        cbSection.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel2.setText("Section");

        jLabel3.setText("Value");

        txtValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel4.setText("lsb");

        jLabel7.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel7.setText("msb");

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(txtValue)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addContainerGap(265, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(btnAdd)
                .addContainerGap())
        );

        jLabel1.setText("Inst. Type");

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Inst. Type Sections"));

        txtTypeSections.setEditable(false);
        txtTypeSections.setColumns(20);
        txtTypeSections.setRows(5);
        jScrollPane1.setViewportView(txtTypeSections);

        lblActual.setText("Current: ");

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIdentifier)
                            .addComponent(txtSintax)
                            .addComponent(txtDataOrder)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(chkOrder)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblActual)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAccept)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSintax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chkOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblActual))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccept)
                    .addComponent(btnCancel)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        String identifier = this.txtIdentifier.getText();
        ArrayList<Line> inst = this.auxInstructions;
        if (isNew) {
            for (Line line : inst) {
                if (line.identifier.equals(identifier)) {
                    DialogCreator.createErrorDialog(this, "Error", "Identifier already defined");
                    return;
                }
            }
            String[] dataOrder = null;
            if (chkOrder.isSelected()) {
                dataOrder = this.txtDataOrder.getText().replaceAll(" ", "").split(",");
            }
            InstructionType type = null;
            for (InstructionType t : this.parent.auxTypes) {
                if (t.getIdentifier().equals((String) this.cbType.getSelectedItem())) {
                    type = t;
                    break;
                }
            }
            if (type == null) {
                DialogCreator.createErrorDialog(this, "Oops", "You are not supposed to see\nthis error.");
            }
            SectionValue[] values = new SectionValue[this.listPredefinedValues.getModel().getSize()];
            for (int i = 0; i < this.listPredefinedValues.getModel().getSize(); i++) {
                String element = this.listPredefinedValues.getModel().getElementAt(i);
                values[i] = SectionValue.parseSectionValue(element);
            }
            Instruction instruct; 
         
                instruct= new Instruction(type, identifier, this.parent.parent.cpu.getAssembler(), values, dataOrder);
            
            instruct.createFormat();
            instruct.setSintax(txtSintax.getText());
            this.parent.auxInstructions.add(instruct);
            this.parent.updateInstructions();
            this.close();
        } else {
            boolean aux = !identifier.equals(this.instruction.identifier);
            for (Line lin : inst) {
                if (lin.identifier.equals(identifier) && aux) {
                    DialogCreator.createErrorDialog(this, "Error", "Identifier already defined");
                    return;
                } else if (lin.identifier.equals(identifier) && !aux) {
                    aux = true;
                }
            }
            this.instruction.identifier = identifier;
            this.instruction.setSintax(this.txtSintax.getText());
            if (this.chkOrder.isSelected()) {
                if (!this.txtDataOrder.getText().isEmpty()) {
                    String auxDO = this.txtDataOrder.getText();
                    auxDO = auxDO.replaceAll(" ", "");
                    String[] dataOrder = auxDO.split(",");
                    this.instruction.dataOrder = dataOrder;
                }
            }
            InstructionType type = null;
            for (InstructionType t : this.parent.auxTypes) {
                if (t.getIdentifier().equals((String) this.cbType.getSelectedItem())) {
                    type = t;
                    break;
                }
            }
            if (type == null) {
                DialogCreator.createErrorDialog(this, "Oops", "You are not supposed to see\nthis error.");
            }
            this.instruction.setType(type);
            SectionValue[] values = new SectionValue[this.listPredefinedValues.getModel().getSize()];
            for (int i = 0; i < this.listPredefinedValues.getModel().getSize(); i++) {
                String element = this.listPredefinedValues.getModel().getElementAt(i);
                values[i] = SectionValue.parseSectionValue(element);
            }
            this.instruction.values = values;
            this.instruction.createFormat();
            this.parent.updateInstructions();
            this.close();
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void chkOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkOrderActionPerformed
        if (this.chkOrder.isSelected()) {
            this.txtDataOrder.setEnabled(true);
            this.txtDataOrder.setEditable(true);
        } else {
            this.txtDataOrder.setEnabled(false);
            this.txtDataOrder.setEditable(false);
        }
    }//GEN-LAST:event_chkOrderActionPerformed

    @SuppressWarnings("unchecked")
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String sector = this.cbSection.getSelectedItem().toString();
        String value = this.txtValue.getText();
        boolean error = false;
        for (int i = 0; i < this.listPredefinedValues.getModel().getSize(); i++) {
            String element = this.listPredefinedValues.getModel().getElementAt(i);
            if (element.contains(sector.toLowerCase()) || element.contains(sector.toUpperCase())) {
                error = true;
                DialogCreator.createErrorDialog(this, "Error", "Value already specified for sector " + sector);
            }
        }
        if (!error) {
            Word newValue = Word.parseWord(value);
            DefaultListModel listModel = ((DefaultListModel) this.listPredefinedValues.getModel());
            listModel.addElement(sector + "," + newValue.toString());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ((DefaultListModel) this.listPredefinedValues.getModel()).removeAllElements();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        close();
    }//GEN-LAST:event_formWindowClosing

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.parent.setEnabled(true);
        this.parent.toFront();
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(DialogCreator.createYesNoDialog(this, "Are you sure you want to\ndelete this isntruction?\nThis can't be undone", "WARNING")==0){
            this.parent.deleteInstruction(this.instruction);
            this.parent.updateInstructions();
            close();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JComboBox<String> cbSection;
    private javax.swing.JComboBox<String> cbType;
    private javax.swing.JCheckBox chkOrder;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblActual;
    private javax.swing.JList<String> listPredefinedValues;
    private javax.swing.JTextField txtDataOrder;
    private javax.swing.JTextField txtIdentifier;
    private javax.swing.JTextField txtSintax;
    private javax.swing.JTextArea txtTypeSections;
    private javax.swing.JTextField txtValue;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void initData() {
        String[] d0 = this.instruction.dataOrder;
        if (this.instruction.dataOrder != null) {
            this.txtDataOrder.setText(Arrays.toString(d0).replaceAll("\\[", "").replaceAll("\\]", ""));
        }
        this.txtIdentifier.setText(this.instruction.getIdentifier());
        this.txtSintax.setText(this.instruction.sintax.getOriginal());
        this.txtTypeSections.setText(Arrays.toString(this.instruction.getType().getFormat().getSectionsNames()).replaceAll("\\[", "").replaceAll("\\]", "").replaceAll(", ", "\n"));
        this.txtValue.setText("00000000");

        this.parent.auxTypes.stream().forEach((type) -> {
            this.cbType.addItem(type.getIdentifier());
        });
        this.cbType.addItemListener((ItemEvent ie) -> {
            int state1 = ie.getStateChange();
            if (state1 == ItemEvent.SELECTED) {
                InstructionEditor.this.updateSectionsCB(InstructionEditor.this.cbType.getSelectedIndex());
                this.txtTypeSections.setText(Arrays.toString(InstructionEditor.this.parent.auxTypes.get(InstructionEditor.this.cbType.getSelectedIndex()).getFormat().getSectionsNames()).replaceAll("\\[", "").replaceAll("\\]", "").replaceAll(", ", "\n"));
            }
        });
        InstructionType type = this.instruction.getType();
        this.lblActual.setText(this.lblActual.getText() + type.getIdentifier());
        for (int i = 0; i < this.parent.auxTypes.size(); i++) {
            if (this.parent.auxTypes.get(i).getIdentifier().equals(type.getIdentifier())) {
                this.updateSectionsCB(i);
                break;
            }
        }
        DefaultListModel model = ((DefaultListModel) this.listPredefinedValues.getModel());
        for (SectionValue value : this.instruction.values) {
            model.addElement(value.identifier + "," + value.value.toString());
        }
    }

    private void updateSectionsCB(int index) {
        this.cbSection.removeAllItems();
        InstructionType type = this.parent.auxTypes.get(index);
        for (String name : type.getFormat().getSectionsNames()) {
            this.cbSection.addItem(name);
        }
    }

    private void close() {
        this.parent.toFront();
        this.parent.setEnabled(true);
        this.dispose();
    }
}
